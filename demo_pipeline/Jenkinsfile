node {
    def GIT_URL               = 'https://github.com/bharathbala96/bharathgit.git'
    def GIT_BRANCH            = 'master'
    def MAVEN_TOOL_NAME       = 'Maven'
    def ARTIFACTORY_SERVER_ID = 'ai2cloud-artifactory'
    def ARTIFACTORY_REPO      = 'ai2cloud-libs-release'
    def GROUP_PATH            = 'com/ai2cloud/sampleweb'
    def APP_VERSION           = '1.0.0'
    def WAR_NAME              = "sampleweb-${APP_VERSION}.war"

    def DEPLOY_HOST           = '3.108.61.208'
    def DEPLOY_USER           = 'ec2-user'
    def DEPLOY_WEBAPPS_PATH   = '/usr/share/tomcat/webapps'
    def PRIVATE_KEY_PATH      = '/var/lib/jenkins/.ssh/id_rsa'

    stage('Checkout Source') {
        echo "üîç Cloning project from GitHub..."
        git branch: GIT_BRANCH, url: GIT_URL, credentialsId: 'githubcreds'
    }

    stage('Build WAR using Maven') {
        echo "‚öôÔ∏è Building application with Maven..."
        def mvnHome = tool name: MAVEN_TOOL_NAME, type: 'maven'
        dir('demo_pipeline') {
            withEnv(["PATH=${mvnHome}/bin:${env.PATH}"]) {
                sh 'mvn clean package -DskipTests'
            }
        }
        echo "‚úÖ WAR file built successfully."
    }

    stage('Upload Artifact to JFrog Artifactory') {
        echo "üì¶ Uploading WAR to JFrog Artifactory..."
    
        // Fetch Artifactory server configuration
        def server = Artifactory.server(ARTIFACTORY_SERVER_ID)
        def buildInfo = Artifactory.newBuildInfo()
    
        // JSON upload spec (path to WAR file and Artifactory target path)
        def uploadSpec = """{
            "files": [
                {
                    "pattern": "demo_pipeline/target/*.war",
                    "target": "${ARTIFACTORY_REPO}/${GROUP_PATH}/${APP_VERSION}/",
                    "flat": true
                }
            ]
        }"""
    
        // Upload artifact
        server.upload spec: uploadSpec, buildInfo: buildInfo
        server.publishBuildInfo buildInfo
    
        echo "‚úÖ Uploaded successfully to https://trialytpm01.jfrog.io/artifactory/${ARTIFACTORY_REPO}/${GROUP_PATH}/${APP_VERSION}/"
    }

    stage('Deploy to Remote Tomcat Server') {
        echo "üöÄ Deploying WAR to remote Tomcat at ${DEPLOY_HOST}..."
        def remote = [:]
        remote.name = "targetServer"
        remote.host = DEPLOY_HOST
        remote.user = DEPLOY_USER
        remote.allowAnyHosts = true
        remote.identityFile = PRIVATE_KEY_PATH

        // Transfer WAR file
        sshPut remote: remote, from: "target/${WAR_NAME}", into: "/tmp/"

        // Restart Tomcat with new WAR
        sshCommand remote: remote, command: """
            sudo systemctl stop tomcat || true
            sudo rm -rf ${DEPLOY_WEBAPPS_PATH}/sampleweb*
            sudo mv /tmp/${WAR_NAME} ${DEPLOY_WEBAPPS_PATH}/sampleweb.war
            sudo systemctl start tomcat
        """
        echo "‚úÖ Deployment completed."
        echo "üåê App URL: http://${DEPLOY_HOST}:8080/sampleweb/"
    }

    stage('Cleanup') {
        echo "üßπ Cleaning workspace..."
        cleanWs()
    }
}